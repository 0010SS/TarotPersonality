@page "/"

@using TarotPersonality.Data
@inject HttpClient Http

<PageTitle>Index</PageTitle>

<style>
    .first-grid {
        display: grid;
        grid-template-rows: 130px 200px 350px 10px;
        justify-content: center;
    }

    .second-grid {
        display: grid;
        grid-template-rows: 100px 360px 300px 49px;
        justify-content: center;
    }

    .third-grid {
        display: grid;
        grid-template-rows: 200px 400px 50px;
        justify-content: center;
    }

    .card-grid {
        display: grid;
        column-gap: 120px;
        grid-column: auto;
        grid-template-columns: auto auto auto;
        grid-template-rows: auto;
        justify-content: center;
        align-items: center;
    }

    .main-banner {
        position: absolute;
        margin-left: auto;
        margin-right: auto;
        left: 0;
        right: 0;
        text-align: center;
    }
</style>

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="flipcard.css">
</head>

<body style="background: url('StarBackground.jpg') no-repeat; background-size: cover; height: 100vh; padding: 0; margin: 0;">

    @if (pageNum == 1) // if the three cards have not been chosen
    {
        <div class="first-grid">

            <div class="main-banner" style="grid-row: 1; display: flex; align-items: center; justify-content: center; margin-top: 1%;">
                <h1 class="font-medium leading-tight text-4xl mt-0 mb-2" style="color: #d3d3d3;">@banner</h1>
            </div>

            <div style="grid-row: 2; display: flex; align-items: center; justify-content: center;">
                <p class="font-medium  text-1xl text-white-300" style="color: white; text-align: center">
                    <font color="gold" size="5xl">《塔罗牌人格测试使用须知》</font><br>
                    <br>
                    大家好！欢迎来到我的塔罗测试！<br>
                    本测试致力于帮助使用者寻找自身的性格特征，如果想有一个精准的测试结果，请仔细阅读并遵循以下守则。<br>
                    1. 本测试只对信任塔罗牌的人开放，若是不信塔罗牌的使用者测试自身，请务必不要相信结果。
                    2. 在测试期间请保持注意力集中，默念以下问题“我的性格特征究竟是怎么样的？” <br>
                    3. 本牌阵为自创牌阵，请勿随意拿走使用。
                    4. 本牌阵原理在于宫廷牌的特征，以宫廷牌可以代表人的性格特征这条原则建立。 <br>
                    5. 测试时请在三个牌组里各抽一张牌，凭自身感觉抽牌。
                    6. 如测试完毕想要将牌阵组合解析，请在测试完毕后添加塔罗师微信付费咨询或自行寻找塔罗师解牌。 <br>
                    7. 整个牌阵中，第一堆牌（国王/骑士）抽出的牌代表人在工作和课内学习时的风格，<br>
                    第二堆牌（皇后）抽出的牌代表人在情感和人际交往方面的性格，第三堆牌（侍从）抽出的牌代表一个人在生活，娱乐和课外兴趣学习时的习惯。 <br>
                    8. 同一个测试一个月内不允许再使用第二次。 <br>
                    <i>以上便是所有的规则，希望您有一个愉快的使用体验！</i><br>
                </p>
            </div>

            <div class="card-grid" style="grid-row: 3; position: relative; top: 100px; left: -10px;">

                <div class="wrapKings" style="display: block;">
                    @foreach (var card in KingCards)
                    {
                        <div class="card" style="@(!card.flipped ? "transform: rotateY(180deg) translateY(-43px); margin-right: -75px;" : "")">
                            <div class="card-inner" style="@(!card.flipped ? "transform: rotateY(180deg) translateY(-43px);" : "")">
                                <div class="card-front" style="background: url(@card.graph); background-size:cover; transform: rotate(@card.deg) scale(0.8)"></div>
                                <div class="card-back" @onclick="() => Flip(card)"></div>
                            </div>
                        </div>
                    }
                </div>
                <div class="wrapQueens" style="display: block;">
                    @foreach (var card in QueenCards)
                    {
                        <div class="card" style="@(!card.flipped ? "transform: rotateY(180deg) translateY(-43px); margin-right: -75px;" : "")">
                            <div class="card-inner" style="@(!card.flipped ? "transform: rotateY(180deg) translateY(-43px);" : "")">
                                <div class="card-front" style="background: url(@card.graph); background-size:cover; transform: rotate(@card.deg) scale(0.8)"></div>
                                <div class="card-back" @onclick="() => Flip(card)"></div>
                            </div>
                        </div>
                    }
                </div>
                <div class="wrapTresses" style="display: block;">
                    @foreach (var card in TressCards)
                    {
                        <div class="card" style="@(!card.flipped ? "transform: rotateY(180deg) translateY(-43px); margin-right: -75px;" : "")">
                            <div class="card-inner" style="@(!card.flipped ? "transform: rotateY(180deg) translateY(-43px);" : "")">
                                <div class="card-front" style="background: url(@card.graph); background-size:cover; transform: rotate(@card.deg) scale(0.8)"></div>
                                <div class="card-back" @onclick="() => Flip(card)"></div>
                            </div>
                        </div>
                    }
                </div>

            </div>

            <p class="font-medium  text-1xl text-white-300" style="color: white; text-align: center; grid-row: 4; position: absolute; left: 42%; bottom: 20px">Author: Hardy Wen & William Li, 2022/12</p>

        </div>
    }
    else if (pageNum == 2 && (KingDsc == null | QueenDsc == null | TressDsc == null))
    {
        <p>Loading...</p>
    }
    else if (pageNum == 2) // if the three cards haven't been chosen
    {
        <div class="second-grid">

            <div class="main-banner" style="grid-row: 1; display: inline-grid; align-items: center; justify-content: center; margin-top: 1%;">
                <h1 class="font-medium leading-tight text-4xl mt-0 mb-2" style="color: #d3d3d3;">@banner</h1>
                <br />
                <p class="font-medium  text-1xl text-white-300" style="color: white;"><i>" 点击箭头切换不同牌的解析 "</i></p>
            </div>

            <div class="card-grid" style="position: relative; grid-row: 2; column-gap: 160px;">

                <div class="wrapKings" style="display: block;">
                    @foreach (var card in KingCards)
                    {
                        <div class="card" style="@(!card.flipped ? "transform: rotateY(180deg) translateY(-43px); margin-right: -70px;" : "")">
                            <div class="card-inner" style="@(!card.flipped ? "transform: rotateY(180deg) translateY(-43px);" : "")">
                                <div class="card-front" style="background: url(@card.graph); -webkit-filter: grayscale(@Filter[0]); filter: grayscale(@Filter[0]); background-size:cover; transform: rotate(@card.deg) scale(0.85)"></div>
                                <div class="card-back" @onclick="() => Flip(card)"></div>
                            </div>
                        </div>
                    }
                </div>
                <div class="wrapQueens" style="display: block;">
                    @foreach (var card in QueenCards)
                    {
                        <div class="card" style="@(!card.flipped ? "transform: rotateY(180deg) translateY(-43px); margin-right: -70px;" : "")">
                            <div class="card-inner" style="@(!card.flipped ? "transform: rotateY(180deg) translateY(-43px);" : "")">
                                <div class="card-front" style="background: url(@card.graph); -webkit-filter: grayscale(@Filter[1]); filter: grayscale(@Filter[1]); background-size:cover; transform: rotate(@card.deg) scale(0.85)"></div>
                                <div class="card-back" @onclick="() => Flip(card)"></div>
                            </div>
                        </div>
                    }
                </div>
                <div class="wrapTresses" style="display: block;">
                    @foreach (var card in TressCards)
                    {
                        <div class="card" style="@(!card.flipped ? "transform: rotateY(180deg) translateY(-43px); margin-right: -70px;" : "")">
                            <div class="card-inner" style="@(!card.flipped ? "transform: rotateY(180deg) translateY(-43px);" : "")">
                                <div class="card-front" style="background: url(@card.graph); -webkit-filter: grayscale(@Filter[2]); filter: grayscale(@Filter[2]); background-size:cover; transform: rotate(@card.deg) scale(0.85)"></div>
                                <div class="card-back" @onclick="() => Flip(card)"></div>
                            </div>
                        </div>
                    }
                </div>

            </div>

            <div style="grid-row: 3; display: flex; align-items: center; justify-content: center; transform: scale(0.85); position: relative; bottom: 100px">
                <button @onclick="LastDsc" style="height: 10%; width: 5%; position: relative; top: -25px; right: 50px"><img src="LeftArrow.png" /></button>
                @if (dscIndex == 1) // display the king cards
                {
                    <p class="font-bold text-2xl text-1000"><font color="gold">@KingDsc[0].line &nbsp</font></p>
                    <p class="font-medium text-1xl text-300" style="color: white;">
                        <!-- TODO: Change KingDsc[0] to KingDsc[1] -->
                        <u>@KingDsc[1].line <br /></u>
                        @foreach (DscLine sline in KingDsc.Skip(2))
                        {
                            @sline.line <br />
                        }
                    </p>
                }
                else if (dscIndex == 2) // display the queen cards
                {
                    <p class="font-bold text-2xl text-1000"><font color="gold">@QueenDsc[0].line &nbsp</font></p>
                    <p class="font-medium text-1xl text-300" style="color: white;">
                        <!-- TODO: Change KingDsc[0] to KingDsc[1] -->
                        <u>@QueenDsc[1].line <br /></u>
                        @foreach (DscLine sline in QueenDsc.Skip(2))
                        {
                            @sline.line <br />
                        }
                    </p>
                }
                else // display the tress cards
                {
                    <p class="font-bold text-2xl text-1000"><font color="gold">@TressDsc[0].line &nbsp</font></p>
                    <p class="font-medium text-1xl text-300" style="color: white;">
                        <!-- TODO: Change KingDsc[0] to KingDsc[1] -->
                        <u>@TressDsc[1].line <br /></u>
                        @foreach (DscLine sline in TressDsc.Skip(2))
                        {
                            @sline.line <br />
                        }
                    </p>
                }
                <button @onclick="NextDsc" style="height: 10%; width: 5%; position: relative; left: 50px; top: -25px;"><img src="RightArrow.png" /></button>
            </div>

            <button @onclick="NextPage" class="focus:outline-none text-white bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:ring-purple-300 font-medium rounded-lg text-sm px-1 py-1 mb-2 dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-900" style="grid-row: 4; width: 10%; margin-left: 45%; position: relative; bottom: 80px;">
                <font size="3" color="yellow"><b>获取更多解析~</b></font>
            </button>

            <p class="font-medium text-1xl text-white-300" style="color: white; text-align: center; position: absolute; left: 42%; bottom: 20px">Author: Hardy Wen & William Li, 2022/12</p>

        </div>
    }
    else // the QR code page
    {
        <div class="third-grid">

            <div class="main-banner" style="grid-row: 1; display: inline-grid; align-items: center; justify-content: center; margin-top: 1%;">
                <h1 class="font-medium leading-tight text-4xl mt-0 mb-2" style="color: gold">添加以下微信以获取更多人工分析～</h1>
                <p class="font-medium  text-1xl text-white-300" style="color: white;"><i>这位小哥哥还会很多其他的关于占卜的技术喔QAQ</i></p>
            </div>

            <div style="grid-row: 2">
                <img src="QRcode.jpeg" style="width: 270px; height: 350px; margin-left: 20%" />
            </div>

            <div style="grid-row: 3; justify-content: center">
                <p class="font-medium  text-1xl text-white-300" style="color: white; text-align: center; ">
                    <i>Pictures references...</i> <br />
                    https://www.free-tarot-reading.net/img/card-back-sprite.jpg?v=2 <br />
                    http://young4you.tuchong.com/4072779/#image4072771
                </p>
            </div>

        </div>
    }

</body>

@code{

    protected override void OnInitialized()
    {
        Setup();
        base.OnInitialized();
    }

    // lists of all cards from 3 fields
    public List<Card> KingCards = new List<Card>();
    public List<Card> QueenCards = new List<Card>();
    public List<Card> TressCards = new List<Card>();

    // lists of different graph paths
    // public List<string> KingGraphs = new List<string>();
    // public List<string> QueenGraphs = new List<string>();
    // public List<string> TressGraphs = new List<string>();
    public List<string> MinorPatterns = new List<string>() { "Cups", "Pentacles", "Swords", "Wands" };

    // list of degrees rotated
    protected List<string> RotateDegrees = new List<string>() { "0deg", "180deg" };

    // variables to control only choosing one card from each field
    protected bool KingChosen, QueenChosen, TressChosen = false;

    // paths for each descriptions
    public DscLine[]? KingDsc;
    public DscLine[]? QueenDsc;
    public DscLine[]? TressDsc;

    // indicators for whether the descriptions have been loaded
    // public bool KingDscLoaded = false;

    // whether a card is being flipped
    public bool flipping = false;

    // controls the disappear and movement in the grid
    public int pageNum = 1;

    // main banner content
    public string banner = "塔罗牌人格测试";

    // index for which decription to be shown
    public int dscIndex = 1;

    // decide which card to be filtered in description
    public int[] Filter = { 0, 1, 1 };

    protected void Setup()
    {
        Random r = new Random();

        // add new cards into the lists
        for (int i = 0; i < 4; i++)
        {
            KingCards.Add(new Card() { id = i, field = "King", deg = RotateDegrees[r.Next(2)], pattern = MinorPatterns[i] });
        }
        for (int i = 0; i < 4; i++)
        {
            KingCards.Add(new Card() { id = i, field = "Knight", deg = RotateDegrees[r.Next(2)], pattern = MinorPatterns[i] });
        }
        for (int i = 0; i < 4; i++)
        {
            QueenCards.Add(new Card() { id = i, field = "Queen", deg = RotateDegrees[r.Next(2)], pattern = MinorPatterns[i] });
        }
        for (int i = 0; i < 4; i++)
        {
            TressCards.Add(new Card() { id = i, field = "Tress", deg = RotateDegrees[r.Next(2)], pattern = MinorPatterns[i] });
        }

        // add the image addresses
        for (int i = 0; i < 4; i++)
        {
            //KingGraphs.Add("TarotImages/King" + MinorPatterns[i] + ".jpeg");
            //KingGraphs.Add("TarotImages/Knight" + MinorPatterns[i] + ".jpeg");
            //QueenGraphs.Add("TarotImages/Queen" + MinorPatterns[i] + ".jpeg");
            //TressGraphs.Add("TarotImages/Tress" + MinorPatterns[i] + ".jpeg");
            // fills in the graph component of each card
            KingCards[i].graph = "TarotImages/" + KingCards[i].field + KingCards[i].pattern + ".jpeg";
            KingCards[i + 4].graph = "TarotImages/" + KingCards[i + 4].field + KingCards[i + 4].pattern + ".jpeg";
            QueenCards[i].graph = "TarotImages/" + QueenCards[i].field + QueenCards[i].pattern + ".jpeg";
            TressCards[i].graph = "TarotImages/" + TressCards[i].field + TressCards[i].pattern + ".jpeg";
        }

        ShuffleCards();

    }

    public void ShuffleCards()
    {
        // shuffle the graphs
        KingCards.Shuffle();
        QueenCards.Shuffle();
        TressCards.Shuffle();
        StateHasChanged();
    }

    public void Flip(Card card)
    {
        if (flipping) return; // if there is something else being flipped, return
        flipping = true;
        // since each field can only be chosen once, when the *Chosen variable is true, we cannot flip anyone more
        switch (card.field)
        {
            case "King":
                {
                    if (!KingChosen) card.flipped = true; // if  a card from this field hasn't been chosen
                    KingChosen = true; // changes the chosen label into true
                    break;
                }
            case "Knight":
                {
                    if (!KingChosen) card.flipped = true; // if  a card from this field hasn't been chosen
                    KingChosen = true; // changes the chosen label into true
                    break;
                }
            case "Queen":
                {
                    if (!QueenChosen) card.flipped = true; // if  a card from this field hasn't been chosen
                    QueenChosen = true; // changes the chosen label into true
                    break;
                }
            case "Tress":
                {
                    if (!TressChosen) card.flipped = true; // if  a card from this field hasn't been chosen
                    TressChosen = true; // changes the chosen label into true
                    break;
                }
        }
        flipping = false;
        StateHasChanged();

        ShowAnalysis();
    }

    public async void ShowAnalysis()
    {
        if (KingChosen && QueenChosen && TressChosen)
        {
            await Task.Delay(1000);
            pageNum = 2; // switch to the next page
            banner = "揭晓结果..."; // change the banner's text

            KingCards.RemoveAll(card => { return card.flipped == false; }); // remove the unchosen cards from the list
            QueenCards.RemoveAll(card => { return card.flipped == false; });
            TressCards.RemoveAll(card => { return card.flipped == false; });

            FindDsc();

            StateHasChanged();
        }
    }

    public async void FindDsc() // find the description for each card
    {
        string KingDscPath = "TarotDescriptions/" + KingCards[0].field + KingCards[0].pattern + KingCards[0].deg + ".json";
        KingDsc = await Http.GetFromJsonAsync<DscLine[]>(KingDscPath);
        string QueenDscPath = "TarotDescriptions/" + QueenCards[0].field + QueenCards[0].pattern + QueenCards[0].deg + ".json";
        QueenDsc = await Http.GetFromJsonAsync<DscLine[]>(QueenDscPath);
        string TressDscPath = "TarotDescriptions/" + TressCards[0].field + TressCards[0].pattern + TressCards[0].deg + ".json";
        TressDsc = await Http.GetFromJsonAsync<DscLine[]>(TressDscPath);

        StateHasChanged();
    }

    public void LastDsc() // switch to the last description if dscIndex > 1
    {
        if (dscIndex != 1)
        {
            Filter[dscIndex - 1] = 1;
            dscIndex--;
            Filter[dscIndex - 1] = 0;
        }
    }

    public void NextDsc() // switch to the next description if dscIndex < 3
    {
        if (dscIndex != 3)
        {
            Filter[dscIndex - 1] = 1;
            dscIndex++;
            Filter[dscIndex - 1] = 0;
        }
    }

    public void NextPage() // switch to the last wechat QR code page
    {
        pageNum++;
    }

    public class DscLine
    {
        public string line { get; set; }
    }

}